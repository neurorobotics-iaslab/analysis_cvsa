%% show the fisher score and the topoplot of a log band signal
clear all; close all;

addpath('/home/paolo/cvsa_ws/src/analysis_cvsa/EOG')
addpath('/home/paolo/Local/cnbi-smrtrain/toolboxes/cva')
addpath('/home/paolo/cvsa_ws/src/analysis_cvsa/512hz/utils')

%% Initialization
a = 4:2:18;
b = a+2;
c = [a; b];
bands = cell(1, size(a, 2) + 1);
for i=1:length(a)
    bands{i} = [a(i), b(i)];
end
bands{i+1} = [8 14];
bands_str = cellfun(@(x) sprintf('%d-%d', x(1), x(2)), bands, 'UniformOutput', false);
nbands = length(bands);
channels_select = {'P3', 'PZ', 'P4', 'POZ', 'O1', 'O2', 'P5', 'P1', 'P2', 'P6', 'PO5', 'PO3', 'PO4', 'PO6', 'PO7', 'PO8', 'OZ'};
signals = cell(1, nbands);
headers = cell(1, nbands);
for idx_band = 1:nbands
    headers{idx_band}.TYP = [];
    headers{idx_band}.DUR = [];
    headers{idx_band}.POS = [];
    signals{idx_band} = [];
end
classes = [730 731];
cf_event = 781;
fix_event = 786;
nchannels = 39;
nclasses = length(classes);
filterOrder = 4;
avg = 1;
eog_threshold = 500;

%% Load file
[filenames, pathname] = uigetfile('*.gdf', 'Select GDF Files', 'MultiSelect', 'on');
if ischar(filenames)
    filenames = {filenames};
end
subject = filenames{1}(1:2);
%% concatenate the files
nFiles = length(filenames);
trial_with_eog = [];
for idx_file= 1: nFiles
    fullpath_file_shift = fullfile(pathname, filenames{idx_file});
    disp(['file (' num2str(idx_file) '/' num2str(nFiles)  '): ', filenames{idx_file}]);
    [c_signal,header] = sload(fullpath_file_shift);
    c_signal = c_signal(:,1:nchannels);
    channels_label = header.Label;

    c_trial_with_eog = eog_detection(c_signal, header, eog_threshold, {'FP1', 'FP2', 'EOG'});
    trial_with_eog = [trial_with_eog; c_trial_with_eog];

     for idx_band = 1:nbands
        band = bands{idx_band};

        signal_processed = proc_512hz(c_signal, header.SampleRate, band, filterOrder, avg);
        
        c_header = headers{idx_band};
        c_header.sampleRate = header.SampleRate;
        c_header.channels_labels = header.Label;
        if isempty(find(header.EVENT.TYP == 2, 1)) % no eye calibration
            c_header.TYP = cat(1, c_header.TYP, header.EVENT.TYP);
            c_header.DUR = cat(1, c_header.DUR, header.EVENT.DUR);
            c_header.POS = cat(1, c_header.POS, header.EVENT.POS + size(signals{idx_band}, 1));
        else
            k = find(header.EVENT.TYP == 1, 1);
            c_header.TYP = cat(1, c_header.TYP, header.EVENT.TYP(k:end));
            c_header.DUR = cat(1, c_header.DUR, header.EVENT.DUR(k:end));
            c_header.POS = cat(1, c_header.POS, header.EVENT.POS(k:end) + size(signals{idx_band}, 1));
        end

        signals{idx_band} = cat(1, signals{idx_band}, signal_processed(:,:));
        headers{idx_band} = c_header;
    end
end


%% Labelling data 
[~, channelsSelected] = ismember(channels_select, channels_label);
nchannelsSelected = size(channelsSelected, 2);
events = headers{1};
sampleRate = events.sampleRate;
cuePOS = events.POS(ismember(events.TYP, classes));
cueDUR = events.DUR(ismember(events.TYP, classes));
cueTYP = events.TYP(ismember(events.TYP, classes));

fixPOS = events.POS(events.TYP == 786);
fixDUR = events.DUR(events.TYP == 786);

cfPOS = events.POS(events.TYP == 781);
cfDUR = events.DUR(events.TYP == 781);

minDurCue = min(cueDUR);
ntrial = length(cuePOS);

%% Labeling data for the dataset
min_durFIX = min(fixDUR);
min_durCF = min(cfDUR);
min_durCUE = min(cueDUR);

trial_start = nan(ntrial, 1);
trial_end = nan(ntrial, 1);
trial_typ = nan(ntrial, 1);
for idx_trial = 1:ntrial
    trial_start(idx_trial) = cfPOS(idx_trial);
    trial_typ(idx_trial) = cueTYP(idx_trial);
    trial_end(idx_trial) = cfPOS(idx_trial) + cfDUR(idx_trial) - 1;
end

min_trial_data = min(trial_end - trial_start+1);
trial_data = nan(min_trial_data, nbands, nchannels, ntrial);
for idx_band = 1:nbands
    c_signal = signals{idx_band};
    for trial = 1:ntrial
        c_start = trial_start(trial);
        c_end = trial_start(trial) + min_trial_data - 1;
        trial_data(:,idx_band,:,trial) = c_signal(c_start:c_end,:);
    end
end

%% refactoring the data
% now the data are placed alternatevely, so odd trial id is for 730, even for 731
balanced_trial_idx = balanced_data_afterEOG(trial_with_eog, trial_typ, classes);
balanced_trial_data = trial_data(:,:,:,logical(balanced_trial_idx));
trial_typ = trial_typ(logical(balanced_trial_idx));
ntrial = sum(balanced_trial_idx);
idx_classes_trial = nan(ntrial/2, nclasses);
for idx_class = 1:nclasses
    idx_classes_trial(:,idx_class) = find(trial_typ == classes(idx_class));
end

tmp = nan(size(balanced_trial_data));
trial_typ = nan(size(trial_typ));
i = 1;
for idx_trial_class = 1:2:ntrial
    for idx_class = 1:nclasses
        tmp(:,:,:,idx_trial_class + idx_class - 1) = balanced_trial_data(:,:,:,idx_classes_trial(i, idx_class));
        trial_typ(idx_trial_class + idx_class - 1) = classes(idx_class);
    end
    i = i + 1;
end
trial_data = tmp; % samples x bands x channels x trials

%% Computing fisher
normalize_std = false;
fisher = nan(nbands, nchannels);
mu = nan(nclasses, nchannels, nbands);
sigma = nan(nclasses, nchannels, nbands);

for idx_band = 1:nbands
    for idx_ch=1:nchannels
        c_data = trial_data(:,idx_band, idx_ch, trial_typ == classes(1));
        mu(1, idx_ch, idx_band) = mean(squeeze(c_data), 'all');
        sigma(1, idx_ch, idx_band) = std(squeeze(c_data(:)));

        c_data = trial_data(:,idx_band, idx_ch, trial_typ == classes(2));
        mu(2, idx_ch, idx_band) = mean(squeeze(c_data), 'all');
        sigma(2, idx_ch, idx_band) = std(squeeze(c_data(:)));
    end
end

% compute fisher
if normalize_std
    for idx_band = 1:nbands
        for idx_ch = 1:nchannels
            fisher(idx_band, idx_ch) = abs(mu(1, idx_ch, idx_band) - mu(2, idx_ch, idx_band)) ./ sqrt(sigma(1, idx_ch, idx_band).^2 + sigma(2, idx_ch, idx_band).^2);
        end
    end
else
    for idx_band = 1:nbands
        for idx_ch = 1:nchannels
            fisher(idx_band, idx_ch) = abs(mu(1, idx_ch, idx_band) - mu(2, idx_ch, idx_band));
        end
    end
end

% with cva
cva = nan(nbands, nchannels);
for idx_band= 1:nbands
    reshaped_signal = nan(min_trial_data * ntrial, nchannels);
    ck = [];
    for idx_trial = 1:ntrial
        reshaped_signal((idx_trial - 1)*min_trial_data + 1 : idx_trial*min_trial_data, :) = trial_data(:,idx_band,:,idx_trial);
        ck = cat(1, ck, repmat(trial_typ(idx_trial), [min_trial_data,1]));
    end

    cva(idx_band, :) = cva_tun_opt(reshaped_signal, ck);
end

%% Computing the log band diff as topoplot
chanlocs_path = '/home/paolo/chanlocs39.mat';
load(chanlocs_path);
diff = nan(nbands, nchannels);
for idx_band = 1:nbands
    c_data_1 = mean(mean(squeeze(trial_data(:,idx_band,:,trial_typ == classes(1))), 3), 1); % mean on trials and then on samples
    c_data_2 = mean(mean(squeeze(trial_data(:,idx_band,:,trial_typ == classes(2))), 3), 1);
 
    diff(idx_band,:) = c_data_2 - c_data_1;
end


%% show fisher, cva and log band diff
figure();
subplot(1,2,1)
imagesc(fisher');

subplot(1,2,2)
imagesc(cva')

figure();
handles = []; cl = -inf;
for idx_band = 1:nbands
    chanlocs_data = diff(idx_band, :);
    subplot(1, ceil(nplot/rows_plot), idx_nplot)
    topoplot(squeeze(chanlocs_data), chanlocs, 'headrad', 'rim', 'maplimits', [-max(abs(chanlocs_data)) max(abs(chanlocs_data))]);
    cl = max(cl, max(abs(chanlocs_data)));
    handles = [handles gca];
    axis image;
    colorbar;
    title(['CUE: ' num2str(((start_topo -1)/ sampleRate)) 's - ' num2str((end_topo/sampleRate)) 's'])
end
set(handles, 'clim', [-cl, cl]);
