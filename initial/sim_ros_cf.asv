%% in this file we use the calibration file to check if the cf will hit or miss. We use the same processing used in ros
clc; clearvars; close all;

%% variables
bands = {[8 10], [10 12], [12 14], [14 16], [8 14]};
avg = 1;
bufferSize_integrator = 48;
chunkSize = 32;
nchannels = 39;
bufferSize_processing = 512;
filterOrder = 4;
classes = [730 731];
fix_event = 786;
cf_event = 781;
startTrial_event = 786; %% we use only data inside fix to boom
nclasses = length(classes);
channels_select = {'P3', 'PZ', 'P4', 'POZ', 'O1', 'O2', 'P5', 'P1', 'P2', 'P6', 'PO5', 'PO3', 'PO4', 'PO6', 'PO7', 'PO8', 'OZ'};
bands_str = cellfun(@(x) sprintf('%d-%d', x(1), x(2)), bands, 'UniformOutput', false);
nbands = length(bands);
signals = cell(1, nbands);
headers = cell(1, nbands);
for idx_band = 1:nbands
    headers{idx_band}.TYP = [];
    headers{idx_band}.DUR = [];
    headers{idx_band}.POS = [];
    signals{idx_band} = [];
end
ths_rejection = [0.5 0.5];
ths = [0.8 0.8];

%% load the gdfs
[filenames, pathname] = uigetfile('*.gdf', 'Select GDF Files', 'MultiSelect', 'on');

% Concatenate all + processing + extract selected channels
nFiles = length(filenames);
for idx_file= 1: nFiles
    fullpath_file = fullfile(pathname, filenames{idx_file});
    disp(['file (' num2str(idx_file) '/' num2str(nFiles)  '): ', filenames{idx_file}]);
    [signal,header] = sload(fullpath_file);
    signal = signal(:,1:nchannels);
    channels_label = header.Label;
    [~, idx_channels_select] = ismember(channels_select, channels_label);

    for idx_band = 1:nbands
        band = bands{idx_band};
        [signal_processed, header_processed] = processing_offline_ros(signal, header, nchannels, bufferSize_processing, filterOrder, band, chunkSize);
        c_header = headers{idx_band};
        c_header.sampleRate = header.SampleRate;
        c_header.channels_labels = header.Label;
        c_header.TYP = cat(1, c_header.TYP, header_processed.EVENT.TYP);
        c_header.DUR = cat(1, c_header.DUR, header_processed.EVENT.DUR);
        c_header.POS = cat(1, c_header.POS, header_processed.EVENT.POS + size(signals{idx_band}, 1));

        signals{idx_band} = cat(1, signals{idx_band}, signal_processed(:,:));
        headers{idx_band} = c_header;
    end
end

%% extract all data
% for each band the signal are: samples x channels x trial
%   in data the signal keep this division for data.trial, data.cue data.cf data.fix
data = cell(1, nbands); 
for idx_band = 1:nbands
    data{idx_band} = extract_all(signals{idx_band}, headers{idx_band}, classes, fix_event, cf_event, startTrial_event);
end

%% config the integrator
% [filename_qda, path_qda] = uigetfile('*.yaml;*.yml', 'Select a YAML File');
path_qda = fullfile(path_qda, filename_qda);
path_qda = '/home/paolo/cvsa_ws/src/qda_cvsa/cfg/qda_c7_lbp_20250131.yaml';
qda = loadQDA(path_qda);
[features, startTrial] = features_extraction(data, bands, qda.bands, qda.idchans);

%% compute the classification and the integrator
nfeature = size(features, 1);
idx_trial = 1;
idx_integrator = 1;
integrator_buffer = [];
ntrial = size(startTrial, 2);
prob_integrated = [];
probs = [];
for idx_feature=1:nfeature
    % reset
    if idx_feature == startTrial(idx_trial)
        if idx_trial == ntrial
            idx_trial = ntrial;
        else
            idx_trial = idx_trial + 1;
        end
        idx_integrator = 1;
        integrator_buffer = repmat(classes, 1, bufferSize_integrator/nclasses);
    end
    if idx_integrator > bufferSize_integrator
        idx_integrator = 1;
    end

    % classify
    feature = features(idx_feature,:);
    prob = apply_qda(qda, feature);
    [~, idxMax] = max(prob);
    if prob(idxMax) > ths_rejection(idxMax)
        integrator_buffer(idx_integrator) = classes(idxMax);
        idx_integrator = idx_integrator + 1;
    end
    prob_integ = nan(1, nclasses);
    for idx_class=1:nclasses
        count = sum(integrator_buffer == classes(idx_class));
        prob_integ(idx_class) = count/bufferSize_integrator;
    end
    probs = cat(1, probs, prob);
    prob_integrated = cat(1, prob_integrated, prob_integ);
end

%% plot the trials
endTrial = cat(2, startTrial, nfeature);
endTrial = endTrial(1,2:end);
nsubplot = 20;
last_trials = 20;
hit = 0; miss = 0; timeout = 0;
for idx_trial=ntrial-last_trials+1:ntrial
    start_trial = startTrial(idx_trial);
    end_trial = endTrial(idx_trial);
    
    c_prob = probs(start_trial:end_trial - 1, :);
    c_prob = cat(1, nan(1, nclasses), c_prob);

    c_prob_integrated = prob_integrated(start_trial:end_trial - 1,:);
    c_prob_integrated = cat(1, repmat(1/nclasses, 1, nclasses), c_prob_integrated);

    figure();
    hold on;
    x = 1:end_trial-start_trial + 1;
    plot(c_prob_integrated(:,1));
    yline(ths_rejection(1), '--r')
    yline(1.0 - ths_rejection(2), '--r')
    yline(ths(1), '-g');
    yline(1.0 - ths(2), '-g');
    legend({'integrated prob of 730', 'rejection 730', 'rejection 731', 'threhsold 730', 'threhsold 731'}, 'Location', 'best');
    scatter(x, c_prob(:,1), 5, 'k', 'filled');
    title(['class asked: ' num2str(data{1}.typ(idx_trial)) ' | trial ' num2str(idx_trial)]);
    ylim([0,1])
    hold off;
end

