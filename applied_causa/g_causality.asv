%% for each trial compute the entropy
clc; clearvars;
addpath('/home/paolo/cvsa_ws/src/analysis_cvsa/512hz/utils')
addpath('/home/paolo/cvsa_ws/src/analysis_cvsa/utils')
% addpath('/home/paolo/Local/cnbi-smrtrain') 
addpath(genpath('/home/paolo/Local/Matlab/MVGC1'))

%% Initialization
a = 4:2:18;
b = a+2;
c = [a; b];
bands = cell(1, size(a, 2));
for i=1:length(a)
    bands{i} = [a(i), b(i)];
end
% bands = {[8 14]};
bands_str = cellfun(@(x) sprintf('%d-%d', x(1), x(2)), bands, 'UniformOutput', false);
nbands = length(bands);
region{1} = {'F3', 'F1', 'FC3', 'FC1'};
region{2} = {'F2', 'F4', 'FC2', 'FC4'};
region{3} = {'PO7', 'PO5', 'PO3', 'O1'};
region{4} = {'PO4', 'PO6', 'PO8', 'O2'};
nregion = size(region, 2);
channels_select = {'P3', 'PZ', 'P4', 'POZ', 'O1', 'O2', 'P5', 'P1', 'P2', 'P6', 'PO5', 'PO3', 'PO4', 'PO6', 'PO7', 'PO8', 'OZ'};
signals = cell(1, nbands);
headers = cell(1, nbands);
for idx_band = 1:nbands
    headers{idx_band}.TYP = [];
    headers{idx_band}.DUR = [];
    headers{idx_band}.POS = [];
    signals{idx_band} = [];
end
classes = [730 731];
cf_event = 781;
fix_event = 786;
nchannels = 39;
nclasses = length(classes);
filterOrder = 4;
avg = 1;
eog_threshold = 500;

%% Load file
[filenames, pathname] = uigetfile('*.gdf', 'Select GDF Files', 'MultiSelect', 'on');
if ischar(filenames)
    filenames = {filenames};
end
subject = filenames{1}(1:2);
%% concatenate the files
nFiles = length(filenames);
trial_with_eog = [];
for idx_file= 1: nFiles
    fullpath_file_shift = fullfile(pathname, filenames{idx_file});
    disp(['file (' num2str(idx_file) '/' num2str(nFiles)  '): ', filenames{idx_file}]);
    [c_signal,header] = sload(fullpath_file_shift);
    c_signal = c_signal(:,1:nchannels);
    channels_label = header.Label;

    c_trial_with_eog = eog_detection(c_signal, header, eog_threshold, {'FP1', 'FP2', 'EOG'});
    trial_with_eog = [trial_with_eog; c_trial_with_eog];

     for idx_band = 1:nbands
        band = bands{idx_band};

        disp(['      [proc] applying filtering' bands_str{idx_band}])
        [b, a] = butter(filterOrder, band(2)*(2/header.SampleRate),'low');
        s_low = filter(b,a,c_signal);
        [b, a] = butter(filterOrder, band(1)*(2/header.SampleRate),'high');
        signal_processed = filter(b,a,s_low);
        
        c_header = headers{idx_band};
        c_header.sampleRate = header.SampleRate;
        c_header.channels_labels = header.Label;
        if isempty(find(header.EVENT.TYP == 2, 1)) % no eye calibration
            c_header.TYP = cat(1, c_header.TYP, header.EVENT.TYP);
            c_header.DUR = cat(1, c_header.DUR, header.EVENT.DUR);
            c_header.POS = cat(1, c_header.POS, header.EVENT.POS + size(signals{idx_band}, 1));
        else
            k = find(header.EVENT.TYP == 1, 1);
            c_header.TYP = cat(1, c_header.TYP, header.EVENT.TYP(k:end));
            c_header.DUR = cat(1, c_header.DUR, header.EVENT.DUR(k:end));
            c_header.POS = cat(1, c_header.POS, header.EVENT.POS(k:end) + size(signals{idx_band}, 1));
        end

        signals{idx_band} = cat(1, signals{idx_band}, signal_processed(:,:));
        headers{idx_band} = c_header;
    end
end


%% Labelling data 
[~, channelsSelected] = ismember(channels_select, channels_label);
nchannelsSelected = size(channelsSelected, 2);
region_channel = cell(1, nregion);
for i_region = 1:nregion
    [~, region_channel{i_region}] = ismember(region{i_region}, channels_label);
end
events = headers{1};
sampleRate = events.sampleRate;
cuePOS = events.POS(ismember(events.TYP, classes));
cueDUR = events.DUR(ismember(events.TYP, classes));
cueTYP = events.TYP(ismember(events.TYP, classes));

fixPOS = events.POS(events.TYP == 786);
fixDUR = events.DUR(events.TYP == 786);

cfPOS = events.POS(events.TYP == 781);
cfDUR = events.DUR(events.TYP == 781);

minDurCue = min(cueDUR);
ntrial = length(cuePOS);

%% Labeling data for the dataset
min_durCF = min(cfDUR);
min_durCUE = min(cueDUR);

trial_start = nan(ntrial, 1);
trial_end = nan(ntrial, 1);
trial_typ = nan(ntrial, 1);
for idx_trial = 1:ntrial
    trial_start(idx_trial) = fixPOS(idx_trial);
    trial_typ(idx_trial) = cueTYP(idx_trial);
    trial_end(idx_trial) = cfPOS(idx_trial) + cfDUR(idx_trial) - 1;
end

min_trial_data = min(trial_end - trial_start+1);
trial_data = nan(min_trial_data, nbands, nchannels, ntrial);
for idx_band = 1:nbands
    c_signal = signals{idx_band};
    for trial = 1:ntrial
        c_start = trial_start(trial);
        c_end = trial_start(trial) + min_trial_data - 1;
        trial_data(:,idx_band,:,trial) = c_signal(c_start:c_end,:);
    end
end

%% refactoring the data
% now the data are placed alternatevely, so odd trial id is for 730, even for 731
balanced_trial_idx = balanced_data_afterEOG(trial_with_eog, trial_typ, classes);
balanced_trial_data = trial_data(:,:,:,logical(balanced_trial_idx));
trial_typ = trial_typ(logical(balanced_trial_idx));
ntrial = sum(balanced_trial_idx);
idx_classes_trial = nan(ntrial/2, nclasses);
for idx_class = 1:nclasses
    idx_classes_trial(:,idx_class) = find(trial_typ == classes(idx_class));
end

tmp = nan(size(balanced_trial_data));
trial_typ = nan(size(trial_typ));
i = 1;
for idx_trial_class = 1:2:ntrial
    for idx_class = 1:nclasses
        tmp(:,:,:,idx_trial_class + idx_class - 1) = balanced_trial_data(:,:,:,idx_classes_trial(i, idx_class));
        trial_typ(idx_trial_class + idx_class - 1) = classes(idx_class);
    end
    i = i + 1;
end
trial_data = tmp;


%% mean signal for region
signal_region = cell(nbands, nregion);

for idx_band = 1:nbands
    for idx_region = 1:nregion
        signal_region{idx_band, idx_region} = squeeze(mean(trial_data(1024+512:end,idx_band, region_channel{idx_region},trial_typ == classes(1)), 3));
    end
end

data = nan(2, size(signal_region{1,1}, 1), ntrial/2);
data(1,:,:) = signal_region{4,1}; 
data(2,:,:) =  signal_region{4,3}; 

% data: [n_channels x n_timepoints x n_trials]
% for i = 1:size(data, 3)
%     data(:, :, i) = zscore(detrend(data(:, :, i)')');
% end

max_order = 5;
nvars = size(data, 1);      % number of regions (e.g. 2)
nobs  = size(data, 2);      % number of time points
ntrials = size(data, 3);    % number of trials

aic_vals = nan(max_order, 1);

for p = 1:max_order
    try
        [A, SIG] = tsdata_to_var(data, p, 'OLS');
        if isbad(A)
            continue;
        end
        % Compute AIC manually
        aic_vals(p) = log(det(SIG)) + (2 * nvars^2 * p) / (nobs * ntrials);
    catch
        continue;
    end
end

% Select order with minimum AIC
[~, morder] = min(aic_vals);
fprintf('Selected model order: %d\n', morder);


%%
% Fit VAR
[A, SIG] = tsdata_to_var(data, morder, 'OLS');
assert(~isbad(A), 'VAR model estimation failed');

% Stability check (use var_to_autocov, not isstable!)
[G, info] = var_to_autocov(A, SIG);
assert(~info.error, 'VAR model is not stable!');

% Compute pairwise-conditional Granger causality
F = autocov_to_pwcgc(G);

fprintf('GC 1→2: %.4f | GC 2→1: %.4f\n', F(1,2), F(2,1));

%%
alpha = 0.05;  % significance level
sig = mvgc_pval(F, morder, size(data, 2), size(data, 3));
F_thresh = F;
F_thresh(F < sig) = 0;

fprintf('Significant GC values:\n');
disp(F_thresh);




